// <auto-generated />
using System;
using DAL;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DAL.Migrations
{
    [DbContext(typeof(HeraldDataContext))]
    partial class HeraldDataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DAL.Entities.Composer", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PeriodID")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("PeriodID");

                    b.ToTable("Composers");
                });

            modelBuilder.Entity("DAL.Entities.Concert", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("LocationID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("Time")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("ID");

                    b.HasIndex("LocationID");

                    b.ToTable("Concertes");
                });

            modelBuilder.Entity("DAL.Entities.Genre", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("DAL.Entities.Location", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DAL.Entities.Orchestra", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ConcertID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ConcertID");

                    b.ToTable("Orchestras");
                });

            modelBuilder.Entity("DAL.Entities.Period", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("DAL.Entities.Piece", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("text");

                    b.Property<string>("ComposerID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ConcertID")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("GenreID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.HasIndex("ComposerID");

                    b.HasIndex("ConcertID");

                    b.HasIndex("GenreID");

                    b.ToTable("Pieces");
                });

            modelBuilder.Entity("DAL.Entities.Composer", b =>
                {
                    b.HasOne("DAL.Entities.Period", "Period")
                        .WithMany("Composers")
                        .HasForeignKey("PeriodID");

                    b.Navigation("Period");
                });

            modelBuilder.Entity("DAL.Entities.Concert", b =>
                {
                    b.HasOne("DAL.Entities.Location", "Location")
                        .WithMany()
                        .HasForeignKey("LocationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");
                });

            modelBuilder.Entity("DAL.Entities.Orchestra", b =>
                {
                    b.HasOne("DAL.Entities.Concert", null)
                        .WithMany("Orchestras")
                        .HasForeignKey("ConcertID");
                });

            modelBuilder.Entity("DAL.Entities.Piece", b =>
                {
                    b.HasOne("DAL.Entities.Composer", "Composer")
                        .WithMany()
                        .HasForeignKey("ComposerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DAL.Entities.Concert", null)
                        .WithMany("Programme")
                        .HasForeignKey("ConcertID");

                    b.HasOne("DAL.Entities.Genre", "Genre")
                        .WithMany("Pieces")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Composer");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("DAL.Entities.Concert", b =>
                {
                    b.Navigation("Orchestras");

                    b.Navigation("Programme");
                });

            modelBuilder.Entity("DAL.Entities.Genre", b =>
                {
                    b.Navigation("Pieces");
                });

            modelBuilder.Entity("DAL.Entities.Period", b =>
                {
                    b.Navigation("Composers");
                });
#pragma warning restore 612, 618
        }
    }
}
